<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Donate â€¢ MyGreenHome</title>
    <link rel="stylesheet" href="/styles/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <style>
        body {
            background-color: #eef2f7;
            font-family: Arial, sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            margin: 0;
        }
        .donation-container {
            max-width: 600px;
            margin: 30px auto;
            padding: 30px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            text-align: center;
            flex-grow: 1;
        }
        .section-header {
            color: #2c3e50;
            margin-bottom: 25px;
            text-align: center;
            font-size: 1.8em;
        }
        .donation-form-group {
            margin-bottom: 20px;
            text-align: left;
        }
        .donation-form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #555;
        }
        .donation-form-group input[type="number"],
        .donation-form-group input[type="text"],
        .donation-form-group input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 1.1em;
        }
        .donation-submit-btn,
        .next-step-btn,
        .back-step-btn { /* Added back-step-btn style */
            background-color: #2ecc71;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1em;
            margin-top: 20px;
            width: 100%;
            transition: background-color 0.3s ease;
        }
        .donation-submit-btn:hover:not(:disabled),
        .next-step-btn:hover:not(:disabled) {
            background-color: #27ae60;
        }
        .donation-submit-btn:disabled,
        .next-step-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .back-step-btn {
            background-color: #6c757d; /* Grey for back button */
            margin-top: 10px; /* Less margin than next/submit */
        }
        .back-step-btn:hover {
            background-color: #5a6268;
        }
        .payment-status-message {
            margin-top: 20px;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
            display: none;
        }
        .payment-status-message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .payment-status-message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6fb;
        }
        .back-link {
            display: inline-block;
            margin-top: 30px;
            padding: 10px 20px;
            background-color: #6c757d;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .back-link:hover {
            background-color: #5a6268;
        }
        /* New styles for multi-step form */
        .step-section {
            display: none;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        .step-section h3 {
            font-size: 1.3em;
            color: #4CAF50;
            margin-bottom: 15px;
        }
        .payment-method-option {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            text-align: left;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .payment-method-option:hover {
            background-color: #f0f0f0;
            border-color: #4CAF50;
        }
        .payment-method-option.selected {
            background-color: #e8f5e9;
            border-color: #4CAF50;
            box-shadow: 0 0 0 2px #4CAF50;
        }
        .payment-method-option input[type="radio"] {
            margin-right: 10px;
        }
        /* Styles for dynamic payment details */
        .payment-details-input {
            margin-top: 15px;
            display: none;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="donation-container">
        <h2 class="section-header">ðŸ’š Support Green Initiatives</h2>
        <p>Your contribution helps fund sustainable projects. Enter an amount to get started.</p>

        <form id="donation-form">
            <div id="step-1-amount">
                <div class="donation-form-group">
                    <label for="amount">Donation Amount (â‚¹)</label>
                    <input type="number" id="amount" name="amount" min="10" step="1" required placeholder="e.g., 500">
                </div>
                <button type="button" class="next-step-btn" id="proceedToPaymentBtn" disabled>
                    Proceed to Payment
                </button>
            </div>

            <div id="step-2-payment-method" class="step-section">
                <h3>Select Payment Method</h3>
                <div class="donation-form-group">
                    <div class="payment-method-option" data-method="credit_card">
                        <input type="radio" name="paymentMethod" id="methodCreditCard" value="credit_card">
                        <i class="fas fa-credit-card"></i> Credit/Debit Card
                    </div>
                    <div class="payment-method-option" data-method="upi">
                        <input type="radio" name="paymentMethod" id="methodUPI" value="upi">
                        <i class="fas fa-qrcode"></i> UPI
                    </div>
                    <div class="payment-method-option" data-method="net_banking">
                        <input type="radio" name="paymentMethod" id="methodNetBanking" value="net_banking">
                        <i class="fas fa-bank"></i> Net Banking
                    </div>
                </div>

                <!-- Dynamic Payment Details Input -->
                <div id="creditCardDetails" class="donation-form-group payment-details-input">
                    <label for="cardNumber">Card Number</label>
                    <input type="text" id="cardNumber" placeholder="XXXX XXXX XXXX XXXX" maxlength="19">
                    <label for="cardExpiry">Expiry (MM/YY)</label>
                    <input type="text" id="cardExpiry" placeholder="MM/YY" maxlength="5">
                    <label for="cardCVC">CVC</label>
                    <input type="password" id="cardCVC" placeholder="XXX" maxlength="3">
                </div>
                <div id="upiDetails" class="donation-form-group payment-details-input">
                    <label for="upiId">UPI ID</label>
                    <input type="text" id="upiId" placeholder="yourname@bankupi">
                </div>
                <div id="netBankingDetails" class="donation-form-group payment-details-input">
                    <label for="bankName">Bank Name</label>
                    <input type="text" id="bankName" placeholder="e.g., State Bank of India">
                    <label for="netBankingUser">Net Banking Username</label>
                    <input type="text" id="netBankingUser" placeholder="Your Bank Username">
                    <label for="netBankingPass">Net Banking Password</label>
                    <input type="password" id="netBankingPass" placeholder="Your Bank Password">
                </div>

                <button type="button" class="next-step-btn" id="proceedToAuthBtn" disabled>
                    Proceed to Authentication
                </button>
                <button type="button" class="back-step-btn" id="backToAmountBtn">
                    <i class="fas fa-arrow-left"></i> Back to Amount
                </button>
            </div>

            <div id="step-3-authentication" class="step-section">
                <h3>Complete Transaction</h3>
                <p>A verification code has been sent to your registered mobile number/email. Enter it below to confirm your donation.</p>
                <div class="donation-form-group">
                    <label for="dummyOtp">Verification Code</label>
                    <input type="text" id="dummyOtp" name="dummyOtp" maxlength="6" placeholder="123456" required>
                </div>
                <button type="submit" class="donation-submit-btn" id="submit-button" disabled>
                    <span id="button-text">Confirm Donation</span>
                </button>
                <button type="button" class="back-step-btn" id="backToPaymentBtn">
                    <i class="fas fa-arrow-left"></i> Back to Payment Method
                </button>
            </div>

            <div id="payment-message" class="payment-status-message"></div>
        </form>
        
        <a href="/dashboard" class="back-link">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <%- include('partials/footer') %>

    <script>
        const donationForm = document.getElementById('donation-form');
        const amountInput = document.getElementById('amount');
        const proceedToPaymentBtn = document.getElementById('proceedToPaymentBtn');
        const step1Amount = document.getElementById('step-1-amount');
        const step2PaymentMethod = document.getElementById('step-2-payment-method');
        const paymentMethodOptions = document.querySelectorAll('.payment-method-option');
        const proceedToAuthBtn = document.getElementById('proceedToAuthBtn');
        const step3Authentication = document.getElementById('step-3-authentication');
        const dummyOtpInput = document.getElementById('dummyOtp');
        const submitButton = document.getElementById('submit-button');
        const paymentMessage = document.getElementById('payment-message');

        // Dynamic payment details inputs
        const creditCardDetails = document.getElementById('creditCardDetails');
        const cardNumberInput = document.getElementById('cardNumber');
        const cardExpiryInput = document.getElementById('cardExpiry');
        const cardCVCInput = document.getElementById('cardCVC');

        const upiDetails = document.getElementById('upiDetails');
        const upiIdInput = document.getElementById('upiId');

        const netBankingDetails = document.getElementById('netBankingDetails');
        const bankNameInput = document.getElementById('bankName');
        const netBankingUserInput = document.getElementById('netBankingUser');
        const netBankingPassInput = document.getElementById('netBankingPass');

        // Back buttons
        const backToAmountBtn = document.getElementById('backToAmountBtn');
        const backToPaymentBtn = document.getElementById('backToPaymentBtn');

        let selectedPaymentMethod = null;

        // --- Step 1: Amount Entry ---
        amountInput.addEventListener('input', () => {
            proceedToPaymentBtn.disabled = !amountInput.value || parseFloat(amountInput.value) <= 0;
            paymentMessage.style.display = 'none';
        });

        proceedToPaymentBtn.addEventListener('click', () => {
            if (amountInput.value && parseFloat(amountInput.value) > 0) {
                step1Amount.style.display = 'none';
                step2PaymentMethod.style.display = 'block';
                paymentMessage.style.display = 'none';
                // Reset payment method selection and details when returning to this step
                paymentMethodOptions.forEach(opt => opt.classList.remove('selected'));
                document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => radio.checked = false);
                creditCardDetails.style.display = 'none';
                upiDetails.style.display = 'none';
                netBankingDetails.style.display = 'none';
                proceedToAuthBtn.disabled = true; // Disable until a method is selected
            }
        });

        // --- Step 2: Payment Method Selection & Dynamic Inputs ---
        paymentMethodOptions.forEach(option => {
            option.addEventListener('click', () => {
                paymentMethodOptions.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                option.querySelector('input[type="radio"]').checked = true;
                selectedPaymentMethod = option.dataset.method;
                
                // Show/hide relevant payment details input
                creditCardDetails.style.display = 'none';
                upiDetails.style.display = 'none';
                netBankingDetails.style.display = 'none';

                // Clear previous payment details inputs
                cardNumberInput.value = ''; cardExpiryInput.value = ''; cardCVCInput.value = '';
                upiIdInput.value = '';
                bankNameInput.value = ''; netBankingUserInput.value = ''; netBankingPassInput.value = '';

                if (selectedPaymentMethod === 'credit_card') {
                    creditCardDetails.style.display = 'block';
                    // Add input listeners for validation
                    [cardNumberInput, cardExpiryInput, cardCVCInput].forEach(input => {
                        input.oninput = validatePaymentDetails;
                    });
                } else if (selectedPaymentMethod === 'upi') {
                    upiDetails.style.display = 'block';
                    upiIdInput.oninput = validatePaymentDetails;
                } else if (selectedPaymentMethod === 'net_banking') {
                    netBankingDetails.style.display = 'block';
                    [bankNameInput, netBankingUserInput, netBankingPassInput].forEach(input => {
                        input.oninput = validatePaymentDetails;
                    });
                }
                validatePaymentDetails(); // Initial validation check
            });
        });

        function validatePaymentDetails() {
            let inputsValid = true;
            if (selectedPaymentMethod === 'credit_card') {
                inputsValid = cardNumberInput.value.length >= 16 && cardExpiryInput.value.length === 5 && cardCVCInput.value.length === 3;
            } else if (selectedPaymentMethod === 'upi') {
                inputsValid = upiIdInput.value.length > 5; // Simple check for UPI ID length
            } else if (selectedPaymentMethod === 'net_banking') {
                inputsValid = bankNameInput.value.length > 2 && netBankingUserInput.value.length > 2 && netBankingPassInput.value.length > 2;
            } else {
                inputsValid = false; // No method selected
            }
            proceedToAuthBtn.disabled = !inputsValid;
            paymentMessage.style.display = 'none'; // Clear messages on input
        }


        proceedToAuthBtn.addEventListener('click', () => {
            if (selectedPaymentMethod && !proceedToAuthBtn.disabled) { // Check if button is enabled by validation
                step2PaymentMethod.style.display = 'none';
                step3Authentication.style.display = 'block';
                paymentMessage.style.display = 'none';
                dummyOtpInput.value = ''; // Clear OTP input
                submitButton.disabled = true; // Disable submit until OTP is entered
            }
        });

        // --- Step 3: Simulated Authentication & Final Submission ---
        dummyOtpInput.addEventListener('input', () => {
            submitButton.disabled = dummyOtpInput.value.trim().length !== 6;
            paymentMessage.style.display = 'none';
        });

        // Back button functionality
        backToAmountBtn.addEventListener('click', () => {
            step2PaymentMethod.style.display = 'none';
            step1Amount.style.display = 'block';
            paymentMessage.style.display = 'none';
        });

        backToPaymentBtn.addEventListener('click', () => {
            step3Authentication.style.display = 'none';
            step2PaymentMethod.style.display = 'block';
            paymentMessage.style.display = 'none';
        });


        // Initial state of buttons and sections
        proceedToPaymentBtn.disabled = !amountInput.value || parseFloat(amountInput.value) <= 0;
        proceedToAuthBtn.disabled = true;
        submitButton.disabled = true;
        step2PaymentMethod.style.display = 'none';
        step3Authentication.style.display = 'none';

        // Handle final form submission (AJAX to backend)
        donationForm.addEventListener('submit', async function(event) {
            event.preventDefault();

            submitButton.disabled = true;
            submitButton.textContent = 'Completing Transaction...';
            paymentMessage.style.display = 'none';

            const amount = amountInput.value;
            const dummyOtp = dummyOtpInput.value.trim();

            if (dummyOtp !== '123456') {
                paymentMessage.textContent = 'Invalid verification code. Please enter 123456.';
                paymentMessage.classList.add('error');
                paymentMessage.style.display = 'block';
                submitButton.disabled = false;
                submitButton.textContent = 'Confirm Donation';
                return;
            }

            try {
                const response = await fetch('/donations/process-donation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ amount: amount, paymentMethod: selectedPaymentMethod, otp: dummyOtp }),
                });

                const result = await response.json();

                if (response.ok) {
                    paymentMessage.textContent = result.message || 'Donation recorded successfully!';
                    paymentMessage.classList.remove('error');
                    paymentMessage.classList.add('success');
                    console.log('Donation Success:', result);
                    window.location.href = '/donations/history';
                } else {
                    paymentMessage.textContent = result.error || 'Failed to record donation.';
                    paymentMessage.classList.add('error');
                    paymentMessage.classList.remove('success');
                    console.error('Donation Error:', result);
                }
            } catch (error) {
                paymentMessage.textContent = 'An unexpected error occurred during donation. Please try again.';
                paymentMessage.classList.add('error');
                paymentMessage.classList.remove('success');
                console.error('Network or unexpected error during donation:', error);
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'Confirm Donation';
            }
        });
    </script>
</body>
</html>
