<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Verify OTP â€¢ MyGreenHome</title>
    <style>
        /* --- Styles for the OTP verification page --- */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: url("/images/green.jpg") no-repeat center center fixed;
            background-size: cover;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #eef2f7;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        /* Auth Container */
        .auth-container {
            position: relative;
            max-width: 320px;
            margin: 0 auto;
            padding: 18px 18px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            background: url("/images/download.jpeg") no-repeat center center;
            background-size: cover;
        }

        .auth-container::before {
            content: "";
            position: absolute;
            inset: 0;
            background-color: rgba(255, 255, 255, 0.75);
            backdrop-filter: blur(3px);
            z-index: 0;
            border-radius: 12px;
        }

        .auth-container * {
            position: relative;
            z-index: 1;
        }

        h2 {
            color: #333;
            margin-bottom: 8px; /* Kept concise */
            font-size: 22px;
            font-weight: 600;
            text-align: center;
        }

        /* Adjusted paragraph spacing */
        p {
            color: #666;
            margin-bottom: 10px; /* Reduced from 20px */
            line-height: 1.4;
            font-size: 14px;
            text-align: center;
        }

        /* Adjusted form-group spacing */
        .form-group {
            margin-bottom: 8px; /* Reduced from 16px */
            text-align: left;
        }

        /* Adjusted label spacing */
        label {
            display: block;
            margin-bottom: 4px; /* Reduced from 6px */
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        /* Adjusted input padding */
        input[type="text"] {
            width: 100%;
            padding: 10px; /* Reduced from 12px */
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            text-align: center;
            letter-spacing: 3px;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }

        input[type="text"].shake {
            animation: shake 0.3s ease-in-out;
        }

        @keyframes shake {
            0%,
            100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            75% {
                transform: translateX(5px);
            }
        }

        /* Adjusted button spacing */
        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: opacity 0.3s ease, transform 0.2s ease;
            margin-top: 10px; /* Reduced from default, added explicit margin top */
        }

        button:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Adjusted error message spacing */
        .error-msg, #otpError {
            color: #e74c3c;
            font-size: 12px; /* Slightly smaller font for compactness */
            margin-top: 3px; /* Reduced from 5px */
            margin-bottom: 8px; /* Adjusted margin */
            min-height: 18px; /* Slightly reduced min-height */
            text-align: left; /* Align to left like label */
        }

        .message-success {
            color: #27ae60;
            font-size: 14px;
            margin-bottom: 15px; /* Reduced from 20px */
        }

        /* Adjusted resend container spacing */
        .resend-container {
            margin-top: 10px; /* Reduced from 16px */
            padding-top: 10px; /* Reduced from 16px */
            border-top: 1px solid #e1e5e9;
        }

        .resend-link {
            color: #667eea;
            text-decoration: none;
            font-size: 13px; /* Slightly smaller font */
        }

        .resend-link:hover {
            text-decoration: underline;
        }
    </style>
</head>

<body>
    <div class="auth-container">
        <h2>Verify OTP</h2>
        <p>We've sent a 6-digit code to <strong id="displayEmail"></strong></p>

        <% if (error) { %>
        <p id="serverError" class="error-msg" style="text-align: center;">
            <%= error %>
        </p>
        <% } else { %>
        <p id="serverError" class="error-msg" style="text-align: center;"></p>
        <% } %>

        <% if (message) { %>
        <p id="successMessage" class="message-success" style="text-align: center;">
            <%= message %>
        </p>
        <% } else { %>
        <p id="successMessage" class="message-success" style="text-align: center;"></p>
        <% } %>


        <form id="otpForm" action="/auth/verify-otp" method="POST" novalidate>
            <input type="hidden" name="username" id="hiddenUsername" value="<%= username %>">
            <input type="hidden" name="isPasswordReset" id="isPasswordResetInput"
                value="<%= typeof isPasswordReset !== 'undefined' && isPasswordReset ? 'true' : 'false' %>">

            <div class="form-group">
                <label for="otp">OTP Code</label>
                <input id="otp" name="otp" type="text" minlength="6" maxlength="6" placeholder="123456" required
                    autocomplete="one-time-code">
            </div>
            <p id="otpError" class="error-msg"></p>

            <button type="submit" id="verifyBtn" disabled>Verify & Continue</button>
        </form>

        <div class="resend-container">
            <a href="#" class="resend-link" id="resendLink">Didn't receive the code? Resend OTP</a>
        </div>
    </div>

    <script>
        const otpInput = document.getElementById('otp');
        const verifyBtn = document.getElementById('verifyBtn');
        const otpError = document.getElementById('otpError');
        const serverError = document.getElementById('serverError');
        const successMessage = document.getElementById('successMessage');
        const isPasswordResetInput = document.getElementById('isPasswordResetInput');
        const otpForm = document.getElementById('otpForm');
        const resendLink = document.getElementById('resendLink');
        const displayEmail = document.getElementById('displayEmail');

        // Set the email from the server-side passed 'username'
        const serverUsername = document.getElementById('hiddenUsername').value;
        displayEmail.textContent = serverUsername;

        // Enable button when 6 digits entered
        otpInput.addEventListener('input', () => {
            otpError.textContent = '';
            serverError.textContent = '';
            successMessage.textContent = '';

            const val = otpInput.value.replace(/\D/g, ''); // Remove non-digits
            otpInput.value = val; // Update input with cleaned value

            verifyBtn.disabled = val.length !== 6;
        });

        // Handle form submission - REMOVED SIMULATION, ALLOWS REAL SUBMISSION
        otpForm.addEventListener('submit', e => {
            const val = otpInput.value;
            if (!/^\d{6}$/.test(val)) {
                e.preventDefault(); // Prevent actual submission if client-side validation fails
                otpError.textContent = 'Please enter exactly 6 digits.';
                otpInput.classList.add('shake');
                setTimeout(() => otpInput.classList.remove('shake'), 300);
                return;
            }
            verifyBtn.disabled = true; // Disable button to prevent double clicks
            verifyBtn.textContent = 'Verifying...';
        });

        // Handle resend OTP - Client-side simulation for resend.
        resendLink.addEventListener('click', e => {
            e.preventDefault();
            resendLink.textContent = 'Sending...';

            setTimeout(() => {
                successMessage.textContent = 'New OTP sent successfully! (Check your email)';
                serverError.textContent = ''; // Clear any previous errors
                resendLink.textContent = "Didn't receive the code? Resend OTP";
                otpInput.value = ''; // Clear OTP input
                verifyBtn.disabled = true;
            }, 1500); // Simulate network delay
        });

        // Auto-focus on OTP input
        otpInput.focus();

        // Check for messages/errors passed from the server on page load
        const urlParams = new URLSearchParams(window.location.search);
        const errorMessage = urlParams.get('error');
        const successMessageParam = urlParams.get('message');
        if (errorMessage) {
            serverError.textContent = decodeURIComponent(errorMessage);
        } else if (successMessageParam) {
            successMessage.textContent = decodeURIComponent(successMessageParam);
        }
    </script>
</body>

</html>